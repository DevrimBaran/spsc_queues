   Compiling spsc_queues v0.1.0 (/home/baran/Dokumente/Uni/MA/spsc_queues)
warning: field `nodes_storage` is never read
  --> src/spsc/dspsc.rs:18:5
   |
14 | pub struct DynListQueue<T: Send + 'static> {
   |            ------------ field in this struct
...
18 |     nodes_storage: Box<[u8]>,      // Raw memory for nodes
   |     ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: constant `CHILD_READY` is never used
  --> src/spsc/uspsc.rs:23:7
   |
23 | const CHILD_READY: u32 = 1;   // producer mapped â€“ waiting for consumer
   |       ^^^^^^^^^^^

warning: fields `fixed_fd` and `next_free_ring` are never read
  --> src/spsc/uspsc.rs:51:4
   |
45 | pub struct UnboundedQueue<T: Send + 'static> {
   |            -------------- fields in this struct
...
51 |    fixed_fd:  [AtomicU32; 2],
   |    ^^^^^^^^
...
62 |    next_free_ring: AtomicUsize,
   |    ^^^^^^^^^^^^^^

warning: method `get_new_ring` is never used
   --> src/spsc/uspsc.rs:107:6
    |
74  | impl<T: Send + 'static> UnboundedQueue<T> {
    | ----------------------------------------- method in this implementation
...
107 |   fn get_new_ring(&self) -> Option<*mut LamportQueue<T>> {
    |      ^^^^^^^^^^^^

warning: methods `pool_pop_prod_nonblocking` and `pool_push_prod` are never used
   --> src/spsc/uspsc.rs:354:7
    |
352 | impl<T: Send + 'static> UnboundedQueue<T> {
    | ----------------------------------------- methods in this implementation
353 |    /// Attempts to get a buffer from the pool without blocking
354 |    fn pool_pop_prod_nonblocking(&self) -> Option<(*mut LamportQueue<T>, u32, usize, bool)> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^
...
397 |    fn pool_push_prod(&self, ring: *mut LamportQueue<T>, fd: u32, len: usize, is_static: bool) {
    |       ^^^^^^^^^^^^^^

warning: `spsc_queues` (lib) generated 5 warnings
warning: unused imports: `AtomicU32` and `Ordering`
  --> benches/process_bench.rs:16:25
   |
16 | use std::sync::atomic::{Ordering, AtomicU32};
   |                         ^^^^^^^^  ^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `spsc_queues` (bench "process_bench") generated 1 warning (run `cargo fix --bench "process_bench"` to apply 1 suggestion)
    Finished `bench` profile [optimized + debuginfo] target(s) in 1.48s
     Running benches/process_bench.rs (target/x86_64-unknown-linux-gnu/release/deps/process_bench-5ecc738d14de4666)
Benchmarking Lamport (process)
Benchmarking Lamport (process): Warming up for 5.0000 s
Benchmarking Lamport (process): Collecting 100 samples in estimated 10.969 s (600 iterations)
Benchmarking Lamport (process): Analyzing
Lamport (process)       time:   [18.574 ms 19.060 ms 19.586 ms]
                        change: [-1.4072% +1.9695% +5.3391%] (p = 0.27 > 0.05)
                        No change in performance detected.
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe

Benchmarking B-Queue (process)
Benchmarking B-Queue (process): Warming up for 5.0000 s
Benchmarking B-Queue (process): Collecting 100 samples in estimated 12.829 s (400 iterations)
Benchmarking B-Queue (process): Analyzing
B-Queue (process)       time:   [32.067 ms 32.519 ms 33.013 ms]
                        change: [-0.0869% +2.3005% +4.8809%] (p = 0.06 > 0.05)
                        No change in performance detected.
Found 5 outliers among 100 measurements (5.00%)
  3 (3.00%) high mild
  2 (2.00%) high severe

Benchmarking Multi-Push (process)
Benchmarking Multi-Push (process): Warming up for 5.0000 s
Benchmarking Multi-Push (process): Collecting 100 samples in estimated 12.307 s (200 iterations)
Benchmarking Multi-Push (process): Analyzing
Multi-Push (process)    time:   [61.701 ms 62.598 ms 63.499 ms]
                        change: [-17.046% -14.999% -13.098%] (p = 0.00 < 0.05)
                        Performance has improved.

Benchmarking Unbounded (process)
Benchmarking Unbounded (process): Warming up for 5.0000 s
Benchmarking Unbounded (process): Collecting 100 samples in estimated 10.014 s (300 iterations)
Benchmarking Unbounded (process): Analyzing
Unbounded (process)     time:   [34.241 ms 34.865 ms 35.512 ms]
                        change: [-58.722% -57.862% -57.093%] (p = 0.00 < 0.05)
                        Performance has improved.

